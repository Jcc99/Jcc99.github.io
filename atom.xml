<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jcc99.github.io/</id>
    <title>Jc&apos;s Blogs</title>
    <updated>2024-09-30T10:02:44.349Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jcc99.github.io/"/>
    <link rel="self" href="https://jcc99.github.io/atom.xml"/>
    <subtitle>足迹</subtitle>
    <logo>https://jcc99.github.io/images/avatar.png</logo>
    <icon>https://jcc99.github.io/favicon.ico</icon>
    <rights>All rights reserved 2024, Jc&apos;s Blogs</rights>
    <entry>
        <title type="html"><![CDATA[ESP32异常分析 - 除0异常]]></title>
        <id>https://jcc99.github.io/post/esp32-yi-chang-fen-xi-chu-0-yi-chang/</id>
        <link href="https://jcc99.github.io/post/esp32-yi-chang-fen-xi-chu-0-yi-chang/">
        </link>
        <updated>2024-09-30T09:38:40.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-c">// 伪代码如下：
if(a % (b/c) == 0){
    ......
}
</code></pre>
<p>在将上述代码添加到业务中后，突然触发ESP32程序coredump流程。</p>
<pre><code class="language-c">Guru Meditation Error: Core  0 panic'ed (Breakpoint). Exception was unhandled.
</code></pre>
<p>于是开始查看任务栈、CPU寄存器信息，排查无果。</p>
<p>随顺着思路，排查代码中涉及内存、指针等相关的功能。大体思路是：内存泄漏、栈溢出、野指针等，排查无果。</p>
<p>忽然想起最近的一个bug排查过程：该bug是由于指针类型不匹配导致的内存踩踏，导致程序coredump，相关信息是从编译器编译时，给出的warning定位到。修改指针类型便修复。</p>
<p>于是顺着此思路，查看编译器的输出信息。果不其然在warning信息中查看到：</p>
<pre><code class="language-c">warning: division by zero [-Wdiv-by-zero]
</code></pre>
<p>这是一个除零异常。于是查看代码，明确变量b、c顺序写反，导致除0，调整后修复。</p>
<p>在RISC-V架构下的一些异常定位，还是比较生疏。若在ARM平台，触发hardfault后，可以查看原因如busfault、usagefault等，即刻就能定位到。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[低功耗蓝牙广播数据格式]]></title>
        <id>https://jcc99.github.io/post/低功耗蓝牙广播数据格式/</id>
        <link href="https://jcc99.github.io/post/低功耗蓝牙广播数据格式/">
        </link>
        <updated>2024-08-15T03:28:08.000Z</updated>
        <content type="html"><![CDATA[<pre><code>部分转载自：
https://www.cnblogs.com/yongdaimi/p/11751970.html
</code></pre>
<h2 id="广播数据">广播数据</h2>
<h3 id="标准格式">标准格式</h3>
<p>广播包有两种： <strong>广播包</strong> （Advertising Data）和 <strong>响应包</strong> （Scan Response），其中广播包是每个设备必须广播的，而响应包是可选的。 数据包的格式如下图所示（图片来自官方 Spec）：</p>
<figure data-type="image" tabindex="1"><img src="https://jcc99.github.io//post-images/BLE/653161-20191028140852286-1592135198.png" alt="653161-20191028140852286-1592135198" loading="lazy"></figure>
<p>每个包都是 31 字节，数据包中分为有效数据（significant）和无效数据（non-significant）两部分</p>
<ul>
<li><strong>有效数据部分</strong> ：包含若干个广播数据单元，称为 <em>AD Structure</em> 。如图中所示，AD Structure 的组成是：第一个字节是长度值 len，表示接下来的 len 个字节是数据部分。数据部分的第一个字节表示数据的类型 <em>AD Type</em> ，剩下的 <code>Len - 1</code> 个字节是真正的数据 <em>AD data</em> 。其中 <strong>AD type</strong> 非常关键，决定了 <em>AD Data</em> 的数据代表的是什么和怎么解析，这个在后面会详细讲；</li>
<li><strong>无效数据部分</strong> ：因为广播包的长度必须是 31 个 byte，如果有效数据部分不到 31 自己，剩下的就用 0 补全。这部分的数据是无效的，解释的时候，忽略即可</li>
</ul>
<h3 id="广播数据格式">广播数据格式</h3>
<p>所有的 <em>AD type</em> 的定义在文档 <a href="https://www.bluetooth.org/en-us/specification/adopted-specifications">Core Specification Supplement</a> 中。 AD Type 包括如下类型：</p>
<ul>
<li><strong>Flags</strong>: TYPE = 0x01。这个数据用来标识设备 LE 物理连接的功能。DATA 是 0 到多个字节的 Flag 值，每个 bit 上用 0 或者 1 来表示是否为 True。如果有任何一个 bit 不为 0，并且广播包是可连接的，就必须包含此数据。各 bit 的定义如下：
<ul>
<li>bit 0: LE 有限发现模式</li>
<li>bit 1: LE 普通发现模式</li>
<li>bit 2: 不支持 BR/EDR</li>
<li>bit 3: 对 Same Device Capable(Controller) 同时支持 BLE 和 BR/EDR</li>
<li>bit 4: 对 Same Device Capable(Host) 同时支持 BLE 和 BR/EDR</li>
<li>bit 5..7: 预留</li>
</ul>
</li>
<li><strong>Service UUID</strong>: 广播数据中一般都会把设备支持的 GATT Service 广播出来，用来告诉外面本设备所支持的 Service。有三种类型的 UUID：16 bit, 32bit, 128 bit。广播中，每种类型类型有有两个类别：完整和非完整的。这样就共有 6 种 AD Type。
<ul>
<li>非完整的 16 bit UUID 列表： TYPE = 0x02;</li>
<li>完整的 16 bit UUID 列表： TYPE = 0x03;</li>
<li>非完整的 32 bit UUID 列表： TYPE = 0x04;</li>
<li>完整的 32 bit UUID 列表： TYPE = 0x05;</li>
<li>非完整的 128 bit UUID 列表： TYPE = 0x06;</li>
<li>完整的 128 bit UUID 列表： TYPE = 0x07;</li>
</ul>
</li>
<li><strong>Local Name</strong>: 设备名字，DATA 是名字的字符串。 <em>Local Name</em> 可以是设备的全名，也可以是设备名字的缩写，其中缩写必须是全名的前面的若干字符。
<ul>
<li>设备全名： TYPE = 0x08</li>
<li>设备简称： TYPE = 0x09</li>
</ul>
</li>
<li><strong>TX Power Level</strong>: TYPE = 0x0A，表示设备发送广播包的信号强度。DATA 部分是一个字节，表示 -127 到 + 127 dBm。</li>
<li><strong>带外安全管理</strong>（Security Manager Out of Band）：TYPE = 0x11。DATA 也是 Flag，每个 bit 表示一个功能：
<ul>
<li>bit 0: OOB Flag，0 表示没有 OOB 数据，1 表示有</li>
<li>bit 1: 支持 LE</li>
<li>bit 2: 对 Same Device Capable(Host) 同时支持 BLE 和 BR/EDR</li>
<li>bit 3: 地址类型，0 表示公开地址，1 表示随机地址</li>
</ul>
</li>
<li><strong>外设</strong>（Slave）连接间隔范围：TYPE = 0x12。数据中定义了 Slave 最大和最小连接间隔，数据包含 4 个字节：
<ul>
<li>前 2 字节：定义最小连接间隔，取值范围：0x0006 ~ 0x0C80，而 0xFFFF 表示未定义；</li>
<li>后 2 字节：定义最大连接间隔，同上，不过需要保证最大连接间隔大于或者等于最小连接间隔。</li>
</ul>
</li>
<li><strong>服务搜寻</strong>：外围设备可以要请中心设备提供相应的 Service。其数据定义和前面的 Service UUID 类似：
<ul>
<li>16 bit UUID 列表： TYPE = 0x14</li>
<li>32 bit UUID 列表： TYPE = 0x??</li>
<li>128 bit UUID 列表： TYPE = 0x15</li>
</ul>
</li>
<li><strong>Service Data</strong>: Service 对应的数据。
<ul>
<li>16 bit UUID Service: TYPE = 0x16, 前 2 字节是 UUID，后面是 Service 的数据；</li>
<li>32 bit UUID Service: TYPE = 0x??, 前 4 字节是 UUID，后面是 Service 的数据；</li>
<li>128 bit UUID Service: TYPE = 0x??, 前 16 字节是 UUID，后面是 Service 的数据；</li>
</ul>
</li>
<li><strong>公开目标地址</strong>：TYPE = 0x17，表示希望这个广播包被指定的目标设备处理，此设备绑定了公开地址，DATA 是目标地址列表，每个地址 6 字节。</li>
<li><strong>随机目标地址</strong>：TYPE = 0x18，定义和前一个类似，表示希望这个广播包被指定的目标设备处理，此设备绑定了随机地址，DATA 是目标地址列表，每个地址 6 字节。</li>
<li><strong>Appearance</strong>：TYPE = 0x19，DATA 是表示了设备的外观。</li>
<li><strong>厂商自定义数据</strong>: TYPE = 0xFF，厂商自定义的数据中，前两个字节表示厂商 ID，剩下的是厂商自己按照需求添加，里面的数据内容自己定义。</li>
</ul>
<h2 id="esp32-实现自定义广播">ESP32 实现自定义广播</h2>
<p>主要修改<strong>厂商自定义数据</strong>字段，实现自己的广播数据。</p>
<ul>
<li>修改广播配置数据结构体，其中0xF6,0x01为厂商ID，</li>
</ul>
<pre><code class="language-c">#define TEST_MANUFACTURER_DATA_LEN 8
uint8_t p_manufacturer_data[TEST_MANUFACTURER_DATA_LEN] = {
    0xF6,
    0x01,
    0x03,
    0x04,
    0x05,
    0x06,
    0x07,
    0x08,
};
esp_ble_adv_data_t adv_data = {
    .set_scan_rsp = false,
    .include_name = true,
    .include_txpower = true,
    .min_interval = 0x20,
    .max_interval = 0x40,
    .appearance = 0x00,
    .manufacturer_len = TEST_MANUFACTURER_DATA_LEN,
    .p_manufacturer_data = p_manufacturer_data,
    .service_data_len = 0,
    .p_service_data = p_manufacturer_data,
    .service_uuid_len = 32,
    .p_service_uuid = service_uuid128,
    .flag = (ESP_BLE_ADV_FLAG_GEN_DISC | ESP_BLE_ADV_FLAG_BREDR_NOT_SPT),
};
</code></pre>
<ul>
<li>使用API更新配置</li>
</ul>
<pre><code class="language-c">esp_ble_gap_config_adv_data();
</code></pre>
<ul>
<li>查看配置是否生效</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://jcc99.github.io//post-images/BLE/image-20240815102841373.png" alt="image-20240815102841373" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://jcc99.github.io//post-images/BLE/lADPJt8m-aGXHrLNCV_NBJI_1170_2399.jpg_720x720q90.jpg" alt="lADPJt8m-aGXHrLNCV_NBJI_1170_2399.jpg_720x720q90" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[VIM使用技巧]]></title>
        <id>https://jcc99.github.io/post/vim-skill/</id>
        <link href="https://jcc99.github.io/post/vim-skill/">
        </link>
        <updated>2024-08-08T10:28:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vim使用技巧">VIM使用技巧</h1>
<h2 id="多行编辑">多行编辑</h2>
<ol>
<li>使用CTRL + V，进入视图模式。</li>
<li>使用大写I，进入插入编辑状态。</li>
<li>输入需插入内容。</li>
<li>按下ESC退出插入模式，插入内容会自动填充多行。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[在中文环境下，使用git review编码异常问题]]></title>
        <id>https://jcc99.github.io/post/zai-zhong-wen-huan-jing-xia-shi-yong-git-review-bian-ma-yi-chang-wen-ti/</id>
        <link href="https://jcc99.github.io/post/zai-zhong-wen-huan-jing-xia-shi-yong-git-review-bian-ma-yi-chang-wen-ti/">
        </link>
        <updated>2024-08-08T10:14:33.000Z</updated>
        <content type="html"><![CDATA[<p>在windows环境下，使用git review提交代码到Gerrit时，提示编码异常问题：<br>
<img src="https://jcc99.github.io//post-images/1723112158308.png" alt="" loading="lazy"></p>
<p>尝试过修改git编码格式：</p>
<pre><code class="language-shell">git config --global core.autocrlf input
git config --global i18n.commitencoding utf-8
git config --global i18n.logoutputencoding utf-8
</code></pre>
<ul>
<li>无效。</li>
</ul>
<p>通过报错提示：</p>
<pre><code class="language-shell">出错行File &quot;D:\tools\Python311\Lib\subprocess.py&quot;, line 1194, in communicate
</code></pre>
<p>找到脚本subprocess.py，修改该文件。</p>
<p>将类Popen中的构造函数参数：encoding=None ，修改为：</p>
<pre><code class="language-python">encoding='utf-8'
</code></pre>
<ul>
<li>解决。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[这是我的第一篇博客]]></title>
        <id>https://jcc99.github.io/post/zhe-shi-wo-de-di-yi-pian-bo-ke/</id>
        <link href="https://jcc99.github.io/post/zhe-shi-wo-de-di-yi-pian-bo-ke/">
        </link>
        <updated>2024-08-07T03:28:08.000Z</updated>
        <content type="html"><![CDATA[<p>本博客用于记录Jc的一些工作、生活随想😃。<br>
人生不是比谁先到达终点，所以过程的点点滴滴，充分享受并留下印记吧🌵~</p>
]]></content>
    </entry>
</feed>